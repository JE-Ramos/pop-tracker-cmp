package je.ramos.poptracker.ui.theme

import androidx.compose.ui.graphics.Color

// Minimal color palette: White, Black, and #E35335 accent
// Following the 60-30-10 rule: 60% white, 30% grays, 10% accent

// Light Theme Colors
val primaryLight = Color(0xFFE35335)  // Pop red accent - used sparingly
val onPrimaryLight = Color(0xFFFFFFFF)  // White on accent
val primaryContainerLight = Color(0xFFFFF0ED)  // Very subtle tint of accent
val onPrimaryContainerLight = Color(0xFF000000)  // Pure black text
val secondaryLight = Color(0xFF666666)  // Medium gray for secondary elements
val onSecondaryLight = Color(0xFFFFFFFF)  // White
val secondaryContainerLight = Color(0xFFF5F5F5)  // Light gray background
val onSecondaryContainerLight = Color(0xFF000000)  // Black text
val tertiaryLight = Color(0xFFE35335)  // Same as primary for consistency
val onTertiaryLight = Color(0xFFFFFFFF)  // White
val tertiaryContainerLight = Color(0xFFFFF0ED)  // Very subtle tint
val onTertiaryContainerLight = Color(0xFF000000)  // Black text
val errorLight = Color(0xFFD32F2F)  // Standard error red
val onErrorLight = Color(0xFFFFFFFF)  // White
val errorContainerLight = Color(0xFFFFE5E5)  // Light error background
val onErrorContainerLight = Color(0xFF000000)  // Black text
val backgroundLight = Color(0xFFF8F8F8)  // Light grayish background
val onBackgroundLight = Color(0xFF000000)  // Pure black text
val surfaceLight = Color(0xFFFAFAFA)  // Pure white surface (for cards)
val onSurfaceLight = Color(0xFF000000)  // Pure black text
val surfaceVariantLight = Color(0xFFFFFFFF)  // White for secondary surfaces
val onSurfaceVariantLight = Color(0xFF1A1A1A)  // Dark gray text
val outlineLight = Color(0xFFE0E0E0)  // Light gray outline
val outlineVariantLight = Color(0xFFEEEEEE)  // Very light gray outline
val scrimLight = Color(0xFF000000)  // Black scrim
val inverseSurfaceLight = Color(0xFF1A1A1A)  // Near black
val inverseOnSurfaceLight = Color(0xFFFFFFFF)  // White
val inversePrimaryLight = Color(0xFFFF6B50)  // Lighter accent
val surfaceDimLight = Color(0xFFFAFAFA)  // Slightly dimmed white
val surfaceBrightLight = Color(0xFFFFFFFF)  // Pure white
val surfaceContainerLowestLight = Color(0xFFFFFFFF)  // Pure white (cards)
val surfaceContainerLowLight = Color(0xFFFFFFFF)  // Pure white (cards)
val surfaceContainerLight = Color(0xFFFFFFFF)  // Pure white (cards)
val surfaceContainerHighLight = Color(0xFFFFFFFF)  // Pure white (cards)
val surfaceContainerHighestLight = Color(0xFFFFFFFF)  // Pure white (cards)

// Medium Contrast Light Theme
val primaryLightMediumContrast = Color(0xFFC73420)  // Darker accent
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFFE35335)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFF4A4A4A)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF808080)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFFC73420)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFFE35335)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFFB71C1C)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFD32F2F)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFFFFFFF)
val onBackgroundLightMediumContrast = Color(0xFF000000)
val surfaceLightMediumContrast = Color(0xFFFFFFFF)
val onSurfaceLightMediumContrast = Color(0xFF000000)
val surfaceVariantLightMediumContrast = Color(0xFFF0F0F0)
val onSurfaceVariantLightMediumContrast = Color(0xFF000000)
val outlineLightMediumContrast = Color(0xFF999999)
val outlineVariantLightMediumContrast = Color(0xFFCCCCCC)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF000000)
val inverseOnSurfaceLightMediumContrast = Color(0xFFFFFFFF)
val inversePrimaryLightMediumContrast = Color(0xFFFF8A7B)
val surfaceDimLightMediumContrast = Color(0xFFE0E0E0)
val surfaceBrightLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFF5F5F5)
val surfaceContainerLightMediumContrast = Color(0xFFEBEBEB)
val surfaceContainerHighLightMediumContrast = Color(0xFFE0E0E0)
val surfaceContainerHighestLightMediumContrast = Color(0xFFD6D6D6)

// High Contrast Light Theme
val primaryLightHighContrast = Color(0xFF8B1A0C)  // Very dark accent
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFFC73420)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF1A1A1A)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF4A4A4A)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF8B1A0C)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFFC73420)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF8B0000)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFFB71C1C)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFFFFFFF)
val onBackgroundLightHighContrast = Color(0xFF000000)
val surfaceLightHighContrast = Color(0xFFFFFFFF)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFE0E0E0)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF000000)
val outlineVariantLightHighContrast = Color(0xFF666666)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF000000)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFFFFB3A5)
val surfaceDimLightHighContrast = Color(0xFFCCCCCC)
val surfaceBrightLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFF0F0F0)
val surfaceContainerLightHighContrast = Color(0xFFE0E0E0)
val surfaceContainerHighLightHighContrast = Color(0xFFD0D0D0)
val surfaceContainerHighestLightHighContrast = Color(0xFFC0C0C0)

// Dark Theme Colors
val primaryDark = Color(0xFFE35335)  // Keep accent same in dark theme
val onPrimaryDark = Color(0xFFFFFFFF)  // White on accent
val primaryContainerDark = Color(0xFF1A0A08)  // Very dark with subtle red tint
val onPrimaryContainerDark = Color(0xFFFFB3A5)  // Light accent tint
val secondaryDark = Color(0xFFB3B3B3)  // Light gray for dark theme
val onSecondaryDark = Color(0xFF000000)  // Black on light gray
val secondaryContainerDark = Color(0xFF1A1A1A)  // Near black container
val onSecondaryContainerDark = Color(0xFFE6E6E6)  // Light gray text
val tertiaryDark = Color(0xFFE35335)  // Same as primary
val onTertiaryDark = Color(0xFFFFFFFF)
val tertiaryContainerDark = Color(0xFF1A0A08)
val onTertiaryContainerDark = Color(0xFFFFB3A5)
val errorDark = Color(0xFFFF6659)  // Bright error for dark theme
val onErrorDark = Color(0xFF000000)
val errorContainerDark = Color(0xFF8B0000)
val onErrorContainerDark = Color(0xFFFFDAD6)
val backgroundDark = Color(0xFF000000)  // Pure black background
val onBackgroundDark = Color(0xFFFFFFFF)  // Pure white text
val surfaceDark = Color(0xFF000000)  // Pure black surface
val onSurfaceDark = Color(0xFFFFFFFF)  // Pure white text
val surfaceVariantDark = Color(0xFF1A1A1A)  // 10% gray
val onSurfaceVariantDark = Color(0xFFE6E6E6)  // Light gray text
val outlineDark = Color(0xFF404040)  // Dark gray outline
val outlineVariantDark = Color(0xFF262626)  // Darker outline
val scrimDark = Color(0xFF000000)  // Black scrim
val inverseSurfaceDark = Color(0xFFE6E6E6)  // Light gray
val inverseOnSurfaceDark = Color(0xFF000000)  // Black
val inversePrimaryDark = Color(0xFF8B1A0C)  // Dark accent
val surfaceDimDark = Color(0xFF0A0A0A)  // Slightly lighter than pure black
val surfaceBrightDark = Color(0xFF333333)  // 20% gray
val surfaceContainerLowestDark = Color(0xFF000000)  // Pure black
val surfaceContainerLowDark = Color(0xFF0A0A0A)  // 4% gray
val surfaceContainerDark = Color(0xFF141414)  // 8% gray
val surfaceContainerHighDark = Color(0xFF1F1F1F)  // 12% gray
val surfaceContainerHighestDark = Color(0xFF2A2A2A)  // 16% gray

// Medium Contrast Dark Theme
val primaryDarkMediumContrast = Color(0xFFFF6B50)  // Brighter accent
val onPrimaryDarkMediumContrast = Color(0xFF000000)
val primaryContainerDarkMediumContrast = Color(0xFFE35335)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFCCCCCC)
val onSecondaryDarkMediumContrast = Color(0xFF000000)
val secondaryContainerDarkMediumContrast = Color(0xFF808080)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFFF6B50)
val onTertiaryDarkMediumContrast = Color(0xFF000000)
val tertiaryContainerDarkMediumContrast = Color(0xFFE35335)
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
val errorDarkMediumContrast = Color(0xFFFF8A80)
val onErrorDarkMediumContrast = Color(0xFF000000)
val errorContainerDarkMediumContrast = Color(0xFFFF5252)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF000000)
val onBackgroundDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceDarkMediumContrast = Color(0xFF000000)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF262626)
val onSurfaceVariantDarkMediumContrast = Color(0xFFFFFFFF)
val outlineDarkMediumContrast = Color(0xFF808080)
val outlineVariantDarkMediumContrast = Color(0xFF666666)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF000000)
val inversePrimaryDarkMediumContrast = Color(0xFFC73420)
val surfaceDimDarkMediumContrast = Color(0xFF000000)
val surfaceBrightDarkMediumContrast = Color(0xFF4D4D4D)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF000000)
val surfaceContainerLowDarkMediumContrast = Color(0xFF1A1A1A)
val surfaceContainerDarkMediumContrast = Color(0xFF262626)
val surfaceContainerHighDarkMediumContrast = Color(0xFF333333)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF404040)

// High Contrast Dark Theme
val primaryDarkHighContrast = Color(0xFFFFB3A5)  // Very light accent
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFFFF6B50)
val onPrimaryContainerDarkHighContrast = Color(0xFF000000)
val secondaryDarkHighContrast = Color(0xFFFFFFFF)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFCCCCCC)
val onSecondaryContainerDarkHighContrast = Color(0xFF000000)
val tertiaryDarkHighContrast = Color(0xFFFFB3A5)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFFF6B50)
val onTertiaryContainerDarkHighContrast = Color(0xFF000000)
val errorDarkHighContrast = Color(0xFFFFB3B3)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFF8A80)
val onErrorContainerDarkHighContrast = Color(0xFF000000)
val backgroundDarkHighContrast = Color(0xFF000000)
val onBackgroundDarkHighContrast = Color(0xFFFFFFFF)
val surfaceDarkHighContrast = Color(0xFF000000)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF333333)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFFFFFFF)
val outlineVariantDarkHighContrast = Color(0xFFB3B3B3)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF8B1A0C)
val surfaceDimDarkHighContrast = Color(0xFF000000)
val surfaceBrightDarkHighContrast = Color(0xFF666666)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF262626)
val surfaceContainerDarkHighContrast = Color(0xFF404040)
val surfaceContainerHighDarkHighContrast = Color(0xFF4D4D4D)
val surfaceContainerHighestDarkHighContrast = Color(0xFF5A5A5A)